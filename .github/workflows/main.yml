name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: practice_notes_db  
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  

      - name: Set up Python
        uses: actions/setup-python@v5  
        with:
          python-version: '3.10'

      - name: Install dependencies
        working-directory: Амангелді_Айдос_Задание_15
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Debug PostgreSQL
        run: |
          docker ps
          docker logs $(docker ps -q --filter "ancestor=postgres")
        continue-on-error: true  

      - name: Wait for PostgreSQL
        run: |
          for i in {1..30}; do
            if docker exec $(docker ps -q --filter "ancestor=postgres") pg_isready -U postgres; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Wait for Redis
        run: |
          for i in {1..30}; do
            if redis-cli -h redis -p 6379 ping | grep -q PONG; then
              echo "Redis is ready!"
              break
            fi
            echo "Waiting for Redis..."
            sleep 2
          done

      - name: Run tests
        working-directory: Амангелді_Айдос_Задание_15
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: pytest tests

      - name: Build Docker image
        working-directory: Амангелді_Айдос_Задание_15
        run: docker build -t my-notes-app:latest -f dockerfile .

      - name: Log in to Docker Hub
        uses: docker/login-action@v3  
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker tag my-notes-app:latest ${{ secrets.DOCKER_USERNAME }}/my-notes-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-notes-app:latest